{"ast":null,"code":"import _slicedToArray from \"/home/hei/Documents/finals/JEK/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/hei/Documents/finals/JEK/client/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport auth from './service/authService';\nimport channelService from './service/channelService';\nconst Channel = React.lazy(() => import('./components/Channel/Channel'));\nconst socket = io('http://localhost:8001/');\n\nconst App = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        channels = _useState2[0],\n        setChannelData = _useState2[1];\n\n  useEffect(() => {\n    auth.login({\n      email: 'email@gmail.com',\n      password: 'password'\n    });\n    channelService.getMessages().then(({\n      channelData\n    }) => {\n      console.log(channelData);\n      setChannelData([...channelData]);\n    });\n    console.log(socket);\n    socket.on('connect', () => {\n      // from servers\n      socket.on('server message', data => {\n        console.log(data);\n      });\n      const joinChannelsObj = {\n        authorization: window.localStorage.getItem('authorization'),\n        username: window.localStorage.getItem('username')\n      };\n      console.log(joinChannelsObj);\n      socket.emit('join channels', joinChannelsObj, data => {\n        console.log(data);\n      });\n    });\n  }, []);\n\n  const sendMessage = (e, message, channelID) => {\n    e.preventDefault();\n    const messageObj = {\n      message,\n      channelID,\n      authorization: window.localStorage.getItem('authorization'),\n      username: window.localStorage.getItem('username')\n    };\n    socket.emit('message', messageObj, data => {\n      setMessages([...messages, data]);\n    });\n  }; // use the channels state\n\n\n  const channelViews = channels.map(({\n    data,\n    messages\n  }) => {\n    const channel = data.channel,\n          name = data.name,\n          users = data.users;\n    console.log('channel id:', channel);\n    console.log('channel name:', name);\n    console.log('users:', users);\n    return React.createElement(Route, {\n      key: channel,\n      path: `/channel/${channel}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Channel, {\n      socket: socket,\n      channel: channel,\n      channelName: name,\n      initialMessages: messages,\n      sendMessage: sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }));\n  });\n  const channelList = channels.map(({\n    data\n  }) => {\n    const name = data.name,\n          channel = data.channel;\n    return React.createElement(\"li\", {\n      key: channel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: `/channel/${channel}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, name));\n  });\n  return React.createElement(React.Suspense, {\n    fallback: React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Loading...\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"nav\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, channelList)), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, channelViews)));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/hei/Documents/finals/JEK/client/src/App.js"],"names":["React","useEffect","useState","BrowserRouter","Router","Switch","Route","Link","io","auth","channelService","Channel","lazy","socket","App","channels","setChannelData","login","email","password","getMessages","then","channelData","console","log","on","data","joinChannelsObj","authorization","window","localStorage","getItem","username","emit","sendMessage","e","message","channelID","preventDefault","messageObj","setMessages","messages","channelViews","map","channel","name","users","channelList"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,EAIEC,IAJF,QAKO,kBALP;AAMA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AAEA,MAAMC,OAAO,GAAGX,KAAK,CAACY,IAAN,CAAW,MAAM,OAAO,8BAAP,CAAjB,CAAhB;AAEA,MAAMC,MAAM,GAAGL,EAAE,CAAC,wBAAD,CAAjB;;AAEA,MAAMM,GAAG,GAAG,MAAM;AAAA,oBACmBZ,QAAQ,CAAC,EAAD,CAD3B;AAAA;AAAA,QACTa,QADS;AAAA,QACCC,cADD;;AAGhBf,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,IAAI,CAACQ,KAAL,CAAW;AACTC,MAAAA,KAAK,EAAE,iBADE;AAETC,MAAAA,QAAQ,EAAE;AAFD,KAAX;AAKAT,IAAAA,cAAc,CACXU,WADH,GAEGC,IAFH,CAEQ,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAqB;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACAN,MAAAA,cAAc,CAAC,CAAC,GAAGM,WAAJ,CAAD,CAAd;AACD,KALH;AAMAC,IAAAA,OAAO,CAACC,GAAR,CAAYX,MAAZ;AACAA,IAAAA,MAAM,CAACY,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzB;AACAZ,MAAAA,MAAM,CAACY,EAAP,CAAU,gBAAV,EAA6BC,IAAD,IAAU;AACpCH,QAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AACD,OAFD;AAIA,YAAMC,eAAe,GAAG;AACtBC,QAAAA,aAAa,EAAEC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,eAA5B,CADO;AAEtBC,QAAAA,QAAQ,EAAEH,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B;AAFY,OAAxB;AAIAR,MAAAA,OAAO,CAACC,GAAR,CAAYG,eAAZ;AACAd,MAAAA,MAAM,CAACoB,IAAP,CAAY,eAAZ,EAA6BN,eAA7B,EAA+CD,IAAD,IAAU;AACtDH,QAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AACD,OAFD;AAGD,KAdD;AAeD,GA5BQ,EA4BN,EA5BM,CAAT;;AA8BA,QAAMQ,WAAW,GAAG,CAACC,CAAD,EAAIC,OAAJ,EAAaC,SAAb,KAA2B;AAC7CF,IAAAA,CAAC,CAACG,cAAF;AACA,UAAMC,UAAU,GAAG;AACjBH,MAAAA,OADiB;AAEjBC,MAAAA,SAFiB;AAGjBT,MAAAA,aAAa,EAAEC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,eAA5B,CAHE;AAIjBC,MAAAA,QAAQ,EAAEH,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B;AAJO,KAAnB;AAMAlB,IAAAA,MAAM,CAACoB,IAAP,CAAY,SAAZ,EAAuBM,UAAvB,EAAoCb,IAAD,IAAU;AAC3Cc,MAAAA,WAAW,CAAC,CAAC,GAAGC,QAAJ,EAAcf,IAAd,CAAD,CAAX;AACD,KAFD;AAGD,GAXD,CAjCgB,CA8ChB;;;AACA,QAAMgB,YAAY,GAAG3B,QAAQ,CAAC4B,GAAT,CAAa,CAAC;AAAEjB,IAAAA,IAAF;AAAQe,IAAAA;AAAR,GAAD,KAAwB;AAAA,UAChDG,OADgD,GACvBlB,IADuB,CAChDkB,OADgD;AAAA,UACvCC,IADuC,GACvBnB,IADuB,CACvCmB,IADuC;AAAA,UACjCC,KADiC,GACvBpB,IADuB,CACjCoB,KADiC;AAExDvB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BoB,OAA3B;AACArB,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BqB,IAA7B;AACAtB,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBsB,KAAtB;AACA,WACE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEF,OAAZ;AAAqB,MAAA,IAAI,EAAG,YAAWA,OAAQ,EAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AACE,MAAA,MAAM,EAAE/B,MADV;AAEE,MAAA,OAAO,EAAE+B,OAFX;AAGE,MAAA,WAAW,EAAEC,IAHf;AAIE,MAAA,eAAe,EAAEJ,QAJnB;AAKE,MAAA,WAAW,EAAEP,WALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAWD,GAhBoB,CAArB;AAkBA,QAAMa,WAAW,GAAGhC,QAAQ,CAAC4B,GAAT,CAAa,CAAC;AAAEjB,IAAAA;AAAF,GAAD,KAAc;AAAA,UACrCmB,IADqC,GACnBnB,IADmB,CACrCmB,IADqC;AAAA,UAC/BD,OAD+B,GACnBlB,IADmB,CAC/BkB,OAD+B;AAE7C,WACE;AAAI,MAAA,GAAG,EAAEA,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAG,YAAWA,OAAQ,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkCC,IAAlC,CADF,CADF;AAKD,GAPmB,CAApB;AASA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,QAAQ,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,WADH,CADF,CADF,EAME,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,YADH,CANF,CADF,CADF;AAcD,CAxFD;;AA0FA,eAAe5B,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\nimport io from 'socket.io-client';\nimport auth from './service/authService';\nimport channelService from './service/channelService';\n\nconst Channel = React.lazy(() => import('./components/Channel/Channel'));\n\nconst socket = io('http://localhost:8001/');\n\nconst App = () => {\n  const [channels, setChannelData] = useState([]);\n\n  useEffect(() => {\n    auth.login({\n      email: 'email@gmail.com',\n      password: 'password',\n    });\n\n    channelService\n      .getMessages()\n      .then(({ channelData }) => {\n        console.log(channelData);\n        setChannelData([...channelData]);\n      });\n    console.log(socket);\n    socket.on('connect', () => {\n      // from servers\n      socket.on('server message', (data) => {\n        console.log(data);\n      });\n\n      const joinChannelsObj = {\n        authorization: window.localStorage.getItem('authorization'),\n        username: window.localStorage.getItem('username'),\n      };\n      console.log(joinChannelsObj);\n      socket.emit('join channels', joinChannelsObj, (data) => {\n        console.log(data);\n      });\n    });\n  }, []);\n\n  const sendMessage = (e, message, channelID) => {\n    e.preventDefault();\n    const messageObj = {\n      message,\n      channelID,\n      authorization: window.localStorage.getItem('authorization'),\n      username: window.localStorage.getItem('username'),\n    };\n    socket.emit('message', messageObj, (data) => {\n      setMessages([...messages, data]);\n    });\n  };\n\n  // use the channels state\n  const channelViews = channels.map(({ data, messages }) => {\n    const { channel, name, users } = data;\n    console.log('channel id:', channel);\n    console.log('channel name:', name);\n    console.log('users:', users);\n    return (\n      <Route key={channel} path={`/channel/${channel}`}>\n        <Channel\n          socket={socket}\n          channel={channel}\n          channelName={name}\n          initialMessages={messages}\n          sendMessage={sendMessage}\n        />\n      </Route>\n    );\n  });\n\n  const channelList = channels.map(({ data }) => {\n    const { name, channel } = data;\n    return (\n      <li key={channel}>\n        <Link to={`/channel/${channel}`}>{name}</Link>\n      </li>\n    );\n  });\n\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Router>\n        <nav>\n          <ul>\n            {channelList}\n          </ul>\n        </nav>\n        <Switch>\n          {channelViews}\n        </Switch>\n      </Router>\n    </React.Suspense>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}