{"ast":null,"code":"var _jsxFileName = \"/home/hei/Documents/finals/JEK/client/src/components/Channel/Container/Chat/Chat.js\";\nimport React, { useEffect } from 'react';\nimport io from 'socket.io-client';\nimport auth from 'authService';\nimport Chatbox from './Chatbox';\nimport { useField } from '../../../../hooks/useField';\nlet socket;\n\nconst Chat = ({\n  channel\n}) => {\n  // define emit message event\n  const message = useField('text');\n\n  const sendMessage = e => {\n    e.preventDefault();\n    console.log(message.value);\n  };\n\n  useEffect(() => {\n    auth.login({});\n    const token = window.localStorage.getItem('token'); // do it in initial render cause then it will connect before that...\n\n    socket = io('http://localhost:8001/channel'); // join that channel (room)\n\n    socket.emit('join channel', {\n      token,\n      channel\n    });\n    socket.on('connect', () => {\n      // from servers\n      socket.on('server message', data => {\n        console.log(data);\n      });\n      socket.emit('message', 'client connected', () => {\n        console.log('sent message to server');\n      });\n    });\n    return () => {\n      socket.off();\n    };\n  }, [channel]);\n  return React.createElement(React.Fragment, null, React.createElement(Chatbox, {\n    message: message,\n    sendMessage: sendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/home/hei/Documents/finals/JEK/client/src/components/Channel/Container/Chat/Chat.js"],"names":["React","useEffect","io","auth","Chatbox","useField","socket","Chat","channel","message","sendMessage","e","preventDefault","console","log","value","login","token","window","localStorage","getItem","emit","on","data","off"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,QAAT,QAAyB,4BAAzB;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAC5B;AACA,QAAMC,OAAO,GAAGJ,QAAQ,CAAC,MAAD,CAAxB;;AAEA,QAAMK,WAAW,GAAIC,CAAD,IAAO;AACzBA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAO,CAACM,KAApB;AACD,GAHD;;AAKAd,EAAAA,SAAS,CAAC,MAAM;AAEdE,IAAAA,IAAI,CAACa,KAAL,CAAW,EAAX;AAGA,UAAMC,KAAK,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,CAAd,CALc,CAMd;;AACAd,IAAAA,MAAM,GAAGJ,EAAE,CAAC,+BAAD,CAAX,CAPc,CASd;;AACAI,IAAAA,MAAM,CAACe,IAAP,CAAY,cAAZ,EACE;AAAEJ,MAAAA,KAAF;AAAST,MAAAA;AAAT,KADF;AAGAF,IAAAA,MAAM,CAACgB,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzB;AACAhB,MAAAA,MAAM,CAACgB,EAAP,CAAU,gBAAV,EAA6BC,IAAD,IAAU;AACpCV,QAAAA,OAAO,CAACC,GAAR,CAAYS,IAAZ;AACD,OAFD;AAIAjB,MAAAA,MAAM,CAACe,IAAP,CAAY,SAAZ,EAAuB,kBAAvB,EAA2C,MAAM;AAC/CR,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD,OAFD;AAGD,KATD;AAWA,WAAO,MAAM;AACXR,MAAAA,MAAM,CAACkB,GAAP;AACD,KAFD;AAGD,GA3BQ,EA2BN,CAAChB,OAAD,CA3BM,CAAT;AA6BA,SACE,0CACE,oBAAC,OAAD;AACE,IAAA,OAAO,EAAEC,OADX;AAEE,IAAA,WAAW,EAAEC,WAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAQD,CA9CD;;AAgDA,eAAeH,IAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport io from 'socket.io-client';\nimport auth from 'authService';\nimport Chatbox from './Chatbox';\nimport { useField } from '../../../../hooks/useField';\n\nlet socket;\n\nconst Chat = ({ channel }) => {\n  // define emit message event\n  const message = useField('text');\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n    console.log(message.value);\n  };\n\n  useEffect(() => {\n\n    auth.login({\n      \n    });\n    const token = window.localStorage.getItem('token');\n    // do it in initial render cause then it will connect before that...\n    socket = io('http://localhost:8001/channel');\n\n    // join that channel (room)\n    socket.emit('join channel',\n      { token, channel });\n\n    socket.on('connect', () => {\n      // from servers\n      socket.on('server message', (data) => {\n        console.log(data);\n      });\n\n      socket.emit('message', 'client connected', () => {\n        console.log('sent message to server');\n      });\n    });\n\n    return () => {\n      socket.off();\n    };\n  }, [channel]);\n\n  return (\n    <>\n      <Chatbox\n        message={message}\n        sendMessage={sendMessage}\n      />\n    </>\n  );\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}