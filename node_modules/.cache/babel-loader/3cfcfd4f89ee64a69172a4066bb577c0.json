{"ast":null,"code":"import _objectSpread from \"/home/hei/Documents/finals/JEK/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/hei/Documents/finals/JEK/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/hei/Documents/finals/JEK/client/src/components/Home.js\";\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport channelService from '../service/channelService';\nimport Channel from './Channel/Channel';\nimport ChannelList from './Channel/LeftBar/ChannelList/ChannelList';\nlet socket;\n\nconst Home = ({\n  logOut,\n  userExists\n}) => {\n  const _useState = useState({\n    guest: window.localStorage.getItem('guest'),\n    currentUser: '',\n    currentChannel: '',\n    authorization: window.localStorage.getItem('authorization'),\n    username: window.localStorage.getItem('username'),\n    channelStates: {}\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const emitDeleteMessage = messageID => {};\n\n  const emitEditMessage = messageID => {};\n\n  const emitSendMessage = message => {\n    const channelID = state.currentChannel;\n    const messageObj = {\n      message,\n      channelID,\n      authorization: state.authorization,\n      username: state.username\n    };\n    socket.emit('message', messageObj, newMessageObj => {\n      setState(prev => _objectSpread({}, prev, {\n        channelStates: _objectSpread({}, prev.channelStates, {\n          [channelID]: _objectSpread({}, prev.channelStates[channelID], {\n            messages: prev.channelStates[channelID].messages.concat(newMessageObj)\n          })\n        })\n      }));\n    });\n  };\n\n  const emitJoinChannel = channelLink => {\n    const joinChannelObj = {\n      channelLink,\n      authorization: state.authorization\n    };\n    socket.emit('join channel', joinChannelObj, channelData => {\n      const error = channelData.error,\n            data = channelData.data,\n            messages = channelData.messages;\n\n      if (!error) {\n        const channel = data.channel;\n        setState(prev => _objectSpread({}, prev, {\n          channelStates: _objectSpread({}, prev.channelStates, {\n            [channel]: _objectSpread({}, data, {\n              messages\n            })\n          })\n        }));\n      } else {\n        console.log(error);\n      }\n    });\n  };\n\n  const emitCreateChannel = channelName => {\n    const createChannelObj = {\n      channelName,\n      authorization: state.authorization\n    };\n    socket.emit('create channel', createChannelObj, channelData => {\n      const data = channelData.data,\n            messages = channelData.messages;\n      const channel = data.channel;\n      setState(prev => _objectSpread({}, prev, {\n        channelStates: _objectSpread({}, prev.channelStates, {\n          [channel]: _objectSpread({}, data, {\n            messages\n          })\n        })\n      }));\n    });\n  }; // handle initial state\n\n\n  useEffect(() => {\n    // grab all channel data, messages\n    if (state.authorization) {\n      channelService.getUserData().then(({\n        channelData\n      }) => {\n        const channelStates = channelData.reduce((obj, ele) => {\n          if (!obj[ele.data.channel]) {\n            // eslint-disable-next-line no-param-reassign\n            obj[ele.data.channel] = {\n              users: ele.data.users,\n              name: ele.data.name,\n              channel: ele.data.channel,\n              messages: ele.messages\n            };\n          }\n\n          return obj;\n        }, {});\n        setState(prev => _objectSpread({}, prev, {\n          channelStates\n        }));\n      });\n    }\n  }, [state.authorization]);\n  useEffect(() => {\n    // change api end point later\n    socket = io('http://localhost:8001/');\n    socket.on('connect', () => {\n      // from servers\n      socket.on('server message', data => {\n        console.log(data);\n      });\n      socket.emit('join channels', {\n        authorization: state.authorization\n      }, data => {\n        console.log(data);\n      });\n    });\n  }, [state.authorization]);\n  useEffect(() => {\n    socket.on('new message', data => {\n      const channelID = data.channelID,\n            newMessageObj = data.newMessageObj;\n      setState(prev => _objectSpread({}, prev, {\n        channelStates: _objectSpread({}, prev.channelStates, {\n          [channelID]: _objectSpread({}, prev.channelStates[channelID], {\n            messages: prev.channelStates[channelID].messages.concat(newMessageObj)\n          })\n        })\n      }));\n    });\n    socket.on('new user', data => {});\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, []);\n  const channels = Object.keys(state.channelStates);\n  const channelIdNamePair = channels.map(id => ({\n    id,\n    name: state.channelStates[id].name\n  }));\n\n  const selectCurrentChannel = channel => {\n    setState(prev => _objectSpread({}, prev, {\n      currentChannel: channel\n    }));\n  };\n\n  const channelItems = channels.map(id => {\n    const _state$channelStates$ = state.channelStates[id],\n          users = _state$channelStates$.users,\n          name = _state$channelStates$.name,\n          messages = _state$channelStates$.messages;\n    return React.createElement(Route, {\n      path: `/channel/${id}`,\n      key: `${id}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Channel, {\n      channel: id,\n      name: name,\n      messages: messages,\n      users: users,\n      emitSendMessage: emitSendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }));\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(\"nav\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(ChannelList, {\n    selectCurrentChannel: selectCurrentChannel,\n    channelIdNamePair: channelIdNamePair,\n    emitJoinChannel: emitJoinChannel,\n    emitCreateChannel: emitCreateChannel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }))), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, channelItems), React.createElement(Route, {\n    path: \"/channel\",\n    render: () => userExists ? React.createElement(Home, {\n      userExists: userExists,\n      setUserExists: setUserExists,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }) : React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/home/hei/Documents/finals/JEK/client/src/components/Home.js"],"names":["React","useEffect","useState","BrowserRouter","Router","Switch","Route","io","channelService","Channel","ChannelList","socket","Home","logOut","userExists","guest","window","localStorage","getItem","currentUser","currentChannel","authorization","username","channelStates","state","setState","emitDeleteMessage","messageID","emitEditMessage","emitSendMessage","message","channelID","messageObj","emit","newMessageObj","prev","messages","concat","emitJoinChannel","channelLink","joinChannelObj","channelData","error","data","channel","console","log","emitCreateChannel","channelName","createChannelObj","getUserData","then","reduce","obj","ele","users","name","on","off","channels","Object","keys","channelIdNamePair","map","id","selectCurrentChannel","channelItems","setUserExists"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport io from 'socket.io-client';\nimport channelService from '../service/channelService';\n\nimport Channel from './Channel/Channel';\nimport ChannelList from './Channel/LeftBar/ChannelList/ChannelList';\n\nlet socket;\n\nconst Home = ({ logOut, userExists }) => {\n  const [state, setState] = useState({\n    guest: window.localStorage.getItem('guest'),\n    currentUser: '',\n    currentChannel: '',\n    authorization: window.localStorage.getItem('authorization'),\n    username: window.localStorage.getItem('username'),\n    channelStates: {},\n  });\n\n  const emitDeleteMessage = (messageID) => {\n  };\n\n  const emitEditMessage = (messageID) => {\n  };\n\n  const emitSendMessage = (message) => {\n    const channelID = state.currentChannel;\n    const messageObj = {\n      message,\n      channelID,\n      authorization: state.authorization,\n      username: state.username,\n    };\n    socket.emit('message', messageObj, (newMessageObj) => {\n      setState((prev) => (\n        {\n          ...prev,\n          channelStates: {\n            ...prev.channelStates,\n            [channelID]: {\n              ...prev.channelStates[channelID],\n              messages: prev.channelStates[channelID].messages.concat(newMessageObj),\n            },\n          },\n        }));\n    });\n  };\n\n  const emitJoinChannel = (channelLink) => {\n    const joinChannelObj = {\n      channelLink,\n      authorization: state.authorization,\n    };\n    socket.emit('join channel', joinChannelObj, (channelData) => {\n      const { error, data, messages } = channelData;\n      if (!error) {\n        const { channel } = data;\n        setState((prev) => (\n          {\n            ...prev,\n            channelStates: {\n              ...prev.channelStates,\n              [channel]: {\n                ...data,\n                messages,\n              },\n            },\n          }\n        ));\n      } else {\n        console.log(error);\n      }\n    });\n  };\n\n  const emitCreateChannel = (channelName) => {\n    const createChannelObj = {\n      channelName,\n      authorization: state.authorization,\n    };\n    socket.emit('create channel', createChannelObj, (channelData) => {\n      const { data, messages } = channelData;\n      const { channel } = data;\n      setState((prev) => (\n        {\n          ...prev,\n          channelStates: {\n            ...prev.channelStates,\n            [channel]: {\n              ...data,\n              messages,\n            },\n          },\n        }\n      ));\n    });\n  };\n\n  // handle initial state\n  useEffect(() => {\n    // grab all channel data, messages\n    if (state.authorization) {\n      channelService\n        .getUserData()\n        .then(({ channelData }) => {\n          const channelStates = channelData.reduce((obj, ele) => {\n            if (!obj[ele.data.channel]) {\n              // eslint-disable-next-line no-param-reassign\n              obj[ele.data.channel] = {\n                users: ele.data.users,\n                name: ele.data.name,\n                channel: ele.data.channel,\n                messages: ele.messages,\n              };\n            }\n            return obj;\n          }, {});\n          setState((prev) => ({ ...prev, channelStates }));\n        });\n    }\n  }, [state.authorization]);\n\n  useEffect(() => {\n    // change api end point later\n    socket = io('http://localhost:8001/');\n    socket.on('connect', () => {\n      // from servers\n      socket.on('server message', (data) => {\n        console.log(data);\n      });\n      socket.emit('join channels', { authorization: state.authorization }, (data) => {\n        console.log(data);\n      });\n    });\n  }, [state.authorization]);\n\n  useEffect(() => {\n    socket.on('new message', (data) => {\n      const { channelID, newMessageObj } = data;\n      setState((prev) => (\n        {\n          ...prev,\n          channelStates: {\n            ...prev.channelStates,\n            [channelID]: {\n              ...prev.channelStates[channelID],\n              messages: prev.channelStates[channelID].messages.concat(newMessageObj),\n            },\n          },\n        }));\n    });\n    socket.on('new user', (data) => {\n\n    });\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, []);\n\n  const channels = Object.keys(state.channelStates);\n  const channelIdNamePair = channels.map((id) => ({ id, name: state.channelStates[id].name }));\n\n  const selectCurrentChannel = (channel) => {\n    setState((prev) => ({ ...prev, currentChannel: channel }));\n  };\n\n  const channelItems = channels.map((id) => {\n    const { users, name, messages } = state.channelStates[id];\n    return (\n      <Route\n        path={`/channel/${id}`}\n        key={`${id}`}\n      >\n        <Channel\n          channel={id}\n          name={name}\n          messages={messages}\n          users={users}\n          emitSendMessage={emitSendMessage}\n        />\n      </Route>\n    );\n  });\n\n  return (\n    <div>\n      <Router>\n        <nav>\n          <ul>\n            <ChannelList\n              selectCurrentChannel={selectCurrentChannel}\n              channelIdNamePair={channelIdNamePair}\n              emitJoinChannel={emitJoinChannel}\n              emitCreateChannel={emitCreateChannel}\n            />\n          </ul>\n        </nav>\n        <Switch>\n          {channelItems}\n        </Switch>\n        <Route\n          path=\"/channel\"\n          render={() => (\n            userExists\n              ? <Home userExists={userExists} setUserExists={setUserExists} />\n              : <Redirect to=\"/\" />\n          )}\n        />\n      </Router>\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}