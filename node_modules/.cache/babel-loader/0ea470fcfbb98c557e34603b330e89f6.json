{"ast":null,"code":"import _slicedToArray from \"/home/hei/Documents/finals/JEK/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/hei/Documents/finals/JEK/client/src/components/Channel/Channel.js\";\nimport React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport Chatbox from './Container/Chat/Chatbox';\nimport ChannelList from './LeftBar/ChannelList/ChannelList';\nimport NewChannel from './NewChannel';\nimport { info } from '../../utils/logger';\nlet socket;\n\nconst Channel = () => {\n  // const [channels, setChannels] = useState([]); // list of user channels\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        channel = _useState2[0],\n        setChannel = _useState2[1]; // current channel\n\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        showCreateJoin = _useState4[0],\n        setShowCreateJoin = _useState4[1];\n\n  const selectChannel = id => {\n    setChannel(id);\n  };\n\n  const newChannel = () => {\n    setShowCreateJoin(prev => !prev);\n  };\n\n  useEffect(() => {\n    // do it in initial render cause then it will connect before that...\n    socket = io('http://localhost:8001/channel');\n    socket.on('connect', () => {\n      // from servers\n      socket.on('server message', data => {\n        info(data);\n      });\n      socket.emit('message', 'client connected', () => {\n        info('sent message to server');\n      });\n    });\n    return () => {\n      socket.off();\n    };\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Channels\", React.createElement(Chatbox, {\n    channel: channel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), showCreateJoin ? React.createElement(NewChannel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }) : React.createElement(React.Fragment, null));\n};\n\nexport default Channel;","map":{"version":3,"sources":["/home/hei/Documents/finals/JEK/client/src/components/Channel/Channel.js"],"names":["React","useEffect","useState","io","axios","Chatbox","ChannelList","NewChannel","info","socket","Channel","channel","setChannel","showCreateJoin","setShowCreateJoin","selectChannel","id","newChannel","prev","on","data","emit","off"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,SAASC,IAAT,QAAqB,oBAArB;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB;AADoB,oBAEUR,QAAQ,CAAC,EAAD,CAFlB;AAAA;AAAA,QAEbS,OAFa;AAAA,QAEJC,UAFI,kBAEwB;;;AAFxB,qBAIwBV,QAAQ,CAAC,KAAD,CAJhC;AAAA;AAAA,QAIbW,cAJa;AAAA,QAIGC,iBAJH;;AAMpB,QAAMC,aAAa,GAAIC,EAAD,IAAQ;AAC5BJ,IAAAA,UAAU,CAACI,EAAD,CAAV;AACD,GAFD;;AAIA,QAAMC,UAAU,GAAG,MAAM;AACvBH,IAAAA,iBAAiB,CAAEI,IAAD,IAAU,CAACA,IAAZ,CAAjB;AACD,GAFD;;AAIAjB,EAAAA,SAAS,CAAC,MAAM;AAEd;AACAQ,IAAAA,MAAM,GAAGN,EAAE,CAAC,+BAAD,CAAX;AACAM,IAAAA,MAAM,CAACU,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzB;AACAV,MAAAA,MAAM,CAACU,EAAP,CAAU,gBAAV,EAA6BC,IAAD,IAAU;AACpCZ,QAAAA,IAAI,CAACY,IAAD,CAAJ;AACD,OAFD;AAIAX,MAAAA,MAAM,CAACY,IAAP,CAAY,SAAZ,EAAuB,kBAAvB,EAA2C,MAAM;AAC/Cb,QAAAA,IAAI,CAAC,wBAAD,CAAJ;AACD,OAFD;AAGD,KATD;AAWA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACa,GAAP;AACD,KAFD;AAGD,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAOE,oBAAC,OAAD;AACE,IAAA,OAAO,EAAEX,OADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAUIE,cAAc,GAAG,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAoB,yCAVtC,CADF;AAcD,CAhDD;;AAkDA,eAAeH,OAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\n\nimport Chatbox from './Container/Chat/Chatbox';\nimport ChannelList from './LeftBar/ChannelList/ChannelList';\nimport NewChannel from './NewChannel';\n\nimport { info } from '../../utils/logger';\n\nlet socket;\n\nconst Channel = () => {\n  // const [channels, setChannels] = useState([]); // list of user channels\n  const [channel, setChannel] = useState({}); // current channel\n\n  const [showCreateJoin, setShowCreateJoin] = useState(false);\n\n  const selectChannel = (id) => {\n    setChannel(id);\n  };\n\n  const newChannel = () => {\n    setShowCreateJoin((prev) => !prev);\n  };\n\n  useEffect(() => {\n\n    // do it in initial render cause then it will connect before that...\n    socket = io('http://localhost:8001/channel');\n    socket.on('connect', () => {\n      // from servers\n      socket.on('server message', (data) => {\n        info(data);\n      });\n\n      socket.emit('message', 'client connected', () => {\n        info('sent message to server');\n      });\n    });\n\n    return () => {\n      socket.off();\n    };\n  }, []);\n\n  return (\n    <div>\n      Channels\n      {/* <ChannelList\n        channels={channels === undefined ? [] : channels}\n        selectChannel={selectChannel}\n        newChannel={newChannel}\n      /> */}\n      <Chatbox\n        channel={channel}\n      />\n      { showCreateJoin ? <NewChannel /> : <></>}\n    </div>\n  );\n};\n\nexport default Channel;\n"]},"metadata":{},"sourceType":"module"}