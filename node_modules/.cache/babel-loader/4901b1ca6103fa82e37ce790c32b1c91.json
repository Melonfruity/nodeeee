{"ast":null,"code":"var _jsxFileName = \"/home/hei/Documents/finals/JEK/client/src/components/Channel/Container/Chat/Chat.js\";\nimport React, { useEffect } from 'react';\nimport io from 'socket.io-client';\nimport auth from '../../../../service/authService';\nimport Chatbox from './Chatbox';\nimport { useField } from '../../../../hooks/useField';\nlet socket;\n\nconst Chat = ({\n  channelID\n}) => {\n  // define emit message event\n  const message = useField('text');\n\n  const sendMessage = e => {\n    e.preventDefault();\n    console.log(message.value);\n    socket.emit('message', message.value, data => {\n      console.log(data);\n    });\n  };\n\n  useEffect(() => {\n    auth.login({\n      email: 'email@gmail.com',\n      password: 'password'\n    });\n    const authorization = window.localStorage.getItem('authorization');\n    const username = window.localStorage.getItem('username'); // do it in initial render cause then it will connect before that...\n\n    socket = io('http://localhost:8001/channel'); // join that channel (room)\n\n    socket.emit('join channel', {\n      authorization,\n      channelID,\n      username\n    });\n    socket.on('connect', () => {\n      // from servers\n      socket.on('server message', data => {\n        console.log(data);\n      });\n      socket.emit('message', 'client connected', () => {\n        console.log('sent message to server');\n      });\n    });\n    return () => {\n      socket.off();\n    };\n  }, [channelID]);\n  return React.createElement(React.Fragment, null, React.createElement(Chatbox, {\n    message: message,\n    sendMessage: sendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/home/hei/Documents/finals/JEK/client/src/components/Channel/Container/Chat/Chat.js"],"names":["React","useEffect","io","auth","Chatbox","useField","socket","Chat","channelID","message","sendMessage","e","preventDefault","console","log","value","emit","data","login","email","password","authorization","window","localStorage","getItem","username","on","off"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,QAAT,QAAyB,4BAAzB;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAC9B;AACA,QAAMC,OAAO,GAAGJ,QAAQ,CAAC,MAAD,CAAxB;;AAEA,QAAMK,WAAW,GAAIC,CAAD,IAAO;AACzBA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAO,CAACM,KAApB;AACAT,IAAAA,MAAM,CAACU,IAAP,CAAY,SAAZ,EAAuBP,OAAO,CAACM,KAA/B,EAAuCE,IAAD,IAAU;AAC9CJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACD,KAFD;AAGD,GAND;;AAQAhB,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,IAAI,CAACe,KAAL,CAAW;AACTC,MAAAA,KAAK,EAAE,iBADE;AAETC,MAAAA,QAAQ,EAAE;AAFD,KAAX;AAKA,UAAMC,aAAa,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,eAA5B,CAAtB;AACA,UAAMC,QAAQ,GAAGH,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAjB,CAPc,CAQd;;AACAlB,IAAAA,MAAM,GAAGJ,EAAE,CAAC,+BAAD,CAAX,CATc,CAWd;;AACAI,IAAAA,MAAM,CAACU,IAAP,CAAY,cAAZ,EACE;AACEK,MAAAA,aADF;AAEEb,MAAAA,SAFF;AAGEiB,MAAAA;AAHF,KADF;AAOAnB,IAAAA,MAAM,CAACoB,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzB;AACApB,MAAAA,MAAM,CAACoB,EAAP,CAAU,gBAAV,EAA6BT,IAAD,IAAU;AACpCJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACD,OAFD;AAIAX,MAAAA,MAAM,CAACU,IAAP,CAAY,SAAZ,EAAuB,kBAAvB,EAA2C,MAAM;AAC/CH,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD,OAFD;AAGD,KATD;AAWA,WAAO,MAAM;AACXR,MAAAA,MAAM,CAACqB,GAAP;AACD,KAFD;AAGD,GAjCQ,EAiCN,CAACnB,SAAD,CAjCM,CAAT;AAmCA,SACE,0CACE,oBAAC,OAAD;AACE,IAAA,OAAO,EAAEC,OADX;AAEE,IAAA,WAAW,EAAEC,WAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAQD,CAvDD;;AAyDA,eAAeH,IAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport io from 'socket.io-client';\nimport auth from '../../../../service/authService';\nimport Chatbox from './Chatbox';\nimport { useField } from '../../../../hooks/useField';\n\nlet socket;\n\nconst Chat = ({ channelID }) => {\n  // define emit message event\n  const message = useField('text');\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n    console.log(message.value);\n    socket.emit('message', message.value, (data) => {\n      console.log(data);\n    });\n  };\n\n  useEffect(() => {\n    auth.login({\n      email: 'email@gmail.com',\n      password: 'password',\n    });\n\n    const authorization = window.localStorage.getItem('authorization');\n    const username = window.localStorage.getItem('username');\n    // do it in initial render cause then it will connect before that...\n    socket = io('http://localhost:8001/channel');\n\n    // join that channel (room)\n    socket.emit('join channel',\n      {\n        authorization,\n        channelID,\n        username,\n      });\n\n    socket.on('connect', () => {\n      // from servers\n      socket.on('server message', (data) => {\n        console.log(data);\n      });\n\n      socket.emit('message', 'client connected', () => {\n        console.log('sent message to server');\n      });\n    });\n\n    return () => {\n      socket.off();\n    };\n  }, [channelID]);\n\n  return (\n    <>\n      <Chatbox\n        message={message}\n        sendMessage={sendMessage}\n      />\n    </>\n  );\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}