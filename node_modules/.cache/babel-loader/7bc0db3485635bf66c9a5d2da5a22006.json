{"ast":null,"code":"import _objectSpread from \"/home/hei/Documents/finals/JEK/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/hei/Documents/finals/JEK/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/hei/Documents/finals/JEK/client/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport auth from './service/authService';\nimport channelService from './service/channelService';\nimport Channel from './components/Channel/Channel';\nconst socket = io('http://localhost:8001/');\n\nconst App = () => {\n  const _useState = useState({\n    currentUser: '',\n    selectedChannel: '',\n    username: '',\n    authorization: '',\n    channelStates: {}\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const emitMessage = (message, channelID) => {\n    const messageObj = {\n      message,\n      channelID,\n      authorization: state.authorization,\n      username: state.username\n    };\n    socket.emit('message', messageObj, data => {\n      console.log(data);\n    });\n  }; // handle initial state\n\n\n  useEffect(() => {\n    // temp login / set user\n    auth.login({\n      email: 'email@gmail.com',\n      password: 'password'\n    });\n    setState(prev => _objectSpread({}, prev, {\n      authorization: window.localStorage.getItem('authorization'),\n      username: window.localStorage.getItem('username')\n    })); // grab all channel data, messages\n\n    channelService.getUserData().then(({\n      channelData\n    }) => {\n      const channelStates = channelData.reduce((obj, ele) => {\n        if (!obj[ele.data.channel]) {\n          // eslint-disable-next-line no-param-reassign\n          obj[ele.data.channel] = {\n            users: ele.data.users,\n            name: ele.data.name,\n            messages: ele.messages\n          };\n        }\n\n        return obj;\n      }, {});\n      setState(prev => _objectSpread({}, prev, {\n        channelStates\n      }));\n    });\n  }, []); // handle initial socket events\n\n  useEffect(() => {\n    socket.on('connect', () => {\n      // from servers\n      socket.on('server message', data => {\n        console.log(data);\n      });\n      const joinChannelsObj = {\n        authorization: state.authorization,\n        username: state.username\n      };\n      console.log(joinChannelsObj);\n      socket.emit('join channels', joinChannelsObj, data => {\n        console.log(data);\n      });\n    });\n  }, [state.authorization, state.currentUser, state.username]);\n  useEffect(() => {\n    socket.on('new message 5e3a4645d822ba297556b852', data => {\n      console.log(data);\n    });\n  });\n  const channels = Object.keys(state.channelStates);\n  const channelItems = channels.map(id => {\n    const _state$channelStates$ = state.channelStates[id],\n          users = _state$channelStates$.users,\n          name = _state$channelStates$.name,\n          messages = _state$channelStates$.messages;\n    return React.createElement(Route, {\n      path: `/channel/${id}`,\n      key: `${id}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Channel, {\n      channel: id,\n      name: name,\n      messages: messages,\n      users: users,\n      emitMessage: emitMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }));\n  });\n  const channelList = channels.map(id => {\n    const name = state.channelStates[id].name;\n    return React.createElement(\"li\", {\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: `/channel/${id}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, name));\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"nav\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/home\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Home\")), channelList)), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, channelItems)));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/hei/Documents/finals/JEK/client/src/App.js"],"names":["React","useEffect","useState","BrowserRouter","Router","Switch","Route","Link","io","auth","channelService","Channel","socket","App","currentUser","selectedChannel","username","authorization","channelStates","state","setState","emitMessage","message","channelID","messageObj","emit","data","console","log","login","email","password","prev","window","localStorage","getItem","getUserData","then","channelData","reduce","obj","ele","channel","users","name","messages","on","joinChannelsObj","channels","Object","keys","channelItems","map","id","channelList"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\nimport io from 'socket.io-client';\nimport auth from './service/authService';\nimport channelService from './service/channelService';\n\nimport Channel from './components/Channel/Channel';\n\nconst socket = io('http://localhost:8001/');\n\nconst App = () => {\n  const [state, setState] = useState({\n    currentUser: '',\n    selectedChannel: '',\n    username: '',\n    authorization: '',\n    channelStates: {},\n  });\n\n  const emitMessage = (message, channelID) => {\n    const messageObj = {\n      message,\n      channelID,\n      authorization: state.authorization,\n      username: state.username,\n    };\n    socket.emit('message', messageObj, (data) => {\n      console.log(data);\n    });\n  };\n\n  // handle initial state\n  useEffect(() => {\n    // temp login / set user\n    auth.login({\n      email: 'email@gmail.com',\n      password: 'password',\n    });\n    setState((prev) => ({\n      ...prev,\n      authorization: window.localStorage.getItem('authorization'),\n      username: window.localStorage.getItem('username'),\n    }));\n    // grab all channel data, messages\n    channelService\n      .getUserData()\n      .then(({ channelData }) => {\n        const channelStates = channelData.reduce((obj, ele) => {\n          if (!obj[ele.data.channel]) {\n            // eslint-disable-next-line no-param-reassign\n            obj[ele.data.channel] = {\n              users: ele.data.users,\n              name: ele.data.name,\n              messages: ele.messages,\n            };\n          }\n          return obj;\n        }, {});\n        setState((prev) => ({ ...prev, channelStates }));\n      });\n  }, []);\n\n  // handle initial socket events\n  useEffect(() => {\n    socket.on('connect', () => {\n      // from servers\n      socket.on('server message', (data) => {\n        console.log(data);\n      });\n      const joinChannelsObj = {\n        authorization: state.authorization,\n        username: state.username,\n      };\n      console.log(joinChannelsObj);\n      socket.emit('join channels', joinChannelsObj, (data) => {\n        console.log(data);\n      });\n    });\n  }, [state.authorization, state.currentUser, state.username]);\n\n  useEffect(() => {\n    socket.on('new message 5e3a4645d822ba297556b852', (data) => {\n      console.log(data);\n    });\n  });\n\n  const channels = Object.keys(state.channelStates);\n\n  const channelItems = channels.map((id) => {\n    const { users, name, messages } = state.channelStates[id];\n    return (\n      <Route\n        path={`/channel/${id}`}\n        key={`${id}`}\n      >\n        <Channel\n          channel={id}\n          name={name}\n          messages={messages}\n          users={users}\n          emitMessage={emitMessage}\n        />\n      </Route>\n    );\n  });\n\n  const channelList = channels.map((id) => {\n    const { name } = state.channelStates[id];\n    return (\n      <li key={id}>\n        <Link to={`/channel/${id}`}>{name}</Link>\n      </li>\n    );\n  });\n\n\n  return (\n    <div>\n      <Router>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/home\">Home</Link>\n            </li>\n            {channelList}\n          </ul>\n        </nav>\n        <Switch>\n          {channelItems}\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}