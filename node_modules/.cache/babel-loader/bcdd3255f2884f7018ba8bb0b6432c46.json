{"ast":null,"code":"import _objectSpread from \"/home/hei/Documents/finals/JEK/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/hei/Documents/finals/JEK/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/hei/Documents/finals/JEK/client/src/components/Home.js\";\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport channelService from '../service/channelService';\nimport Channel from './Channel/Channel';\nimport ChannelList from './Channel/LeftBar/ChannelList/ChannelList';\nlet socket;\n\nconst Home = ({\n  logOut\n}) => {\n  const _useState = useState({\n    currentUser: '',\n    currentChannel: '',\n    authorization: window.localStorage.getItem('authorization'),\n    username: window.localStorage.getItem('username'),\n    channelStates: {}\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  console.log(state);\n\n  const emitDeleteMessage = messageID => {};\n\n  const emitEditMessage = messageID => {};\n\n  const emitSendMessage = message => {\n    const channelID = state.currentChannel;\n    const messageObj = {\n      message,\n      channelID,\n      authorization: state.authorization,\n      username: state.username\n    };\n    socket.emit('message', messageObj, newMessageObj => {\n      setState(prev => _objectSpread({}, prev, {\n        channelStates: _objectSpread({}, prev.channelStates, {\n          [channelID]: _objectSpread({}, prev.channelStates[channelID], {\n            messages: prev.channelStates[channelID].messages.concat(newMessageObj)\n          })\n        })\n      }));\n    });\n  };\n\n  const emitJoinChannel = channelLink => {\n    socket.emit('join channel', channelLink, data => {\n      console.log(data);\n    });\n  };\n\n  const emitCreateChannel = channelName => {\n    console.log(channelName);\n    socket.emit('create channel', channelName, data => {\n      console.log(data);\n    });\n  }; // handle initial state\n\n\n  useEffect(() => {\n    // grab all channel data, messages\n    channelService.getUserData().then(({\n      channelData\n    }) => {\n      const channelStates = channelData.reduce((obj, ele) => {\n        if (!obj[ele.data.channel]) {\n          // eslint-disable-next-line no-param-reassign\n          obj[ele.data.channel] = {\n            users: ele.data.users,\n            name: ele.data.name,\n            messages: ele.messages\n          };\n        }\n\n        return obj;\n      }, {});\n      setState(prev => _objectSpread({}, prev, {\n        channelStates\n      }));\n    });\n  }, []);\n  useEffect(() => {\n    socket = io('http://localhost:8001/');\n    socket.on('connect', () => {\n      // from servers\n      socket.on('server message', data => {\n        console.log(data);\n      });\n      socket.emit('join channels', {\n        authorization: state.authorization\n      }, data => {\n        console.log(data);\n      });\n    });\n  }, []);\n  useEffect(() => {\n    socket.on('new message', data => {\n      console.log(data); // console.log(state.channelStates[data.channelID]);\n\n      setState(prev => _objectSpread({}, prev, {\n        channelStates: _objectSpread({}, prev.channelStates, {\n          [data.channelID]: _objectSpread({}, prev.channelStates[data.channelID], {\n            messages: prev.channelStates[data.channelID].messages.concat(data.newMessageObj)\n          })\n        })\n      }));\n    });\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [state.channelStates]);\n  const channels = Object.keys(state.channelStates);\n  const channelIdNamePair = channels.map(id => ({\n    id,\n    name: state.channelStates[id].name\n  }));\n\n  const selectCurrentChannel = channel => {\n    setState(prev => _objectSpread({}, prev, {\n      currentChannel: channel\n    }));\n  };\n\n  const channelItems = channels.map(id => {\n    const _state$channelStates$ = state.channelStates[id],\n          users = _state$channelStates$.users,\n          name = _state$channelStates$.name,\n          messages = _state$channelStates$.messages;\n    return React.createElement(Route, {\n      path: `/channel/${id}`,\n      key: `${id}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(Channel, {\n      channel: id,\n      name: name,\n      messages: messages,\n      users: users,\n      emitSendMessage: emitSendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }));\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/\",\n    onClick: logOut,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \" Logout\"), React.createElement(\"nav\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(ChannelList, {\n    selectCurrentChannel: selectCurrentChannel,\n    channelIdNamePair: channelIdNamePair,\n    emitJoinChannel: emitJoinChannel,\n    emitCreateChannel: emitCreateChannel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }))), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, channelItems)));\n};\n\nexport default Home;","map":{"version":3,"sources":["/home/hei/Documents/finals/JEK/client/src/components/Home.js"],"names":["React","useEffect","useState","BrowserRouter","Router","Switch","Route","Link","io","channelService","Channel","ChannelList","socket","Home","logOut","currentUser","currentChannel","authorization","window","localStorage","getItem","username","channelStates","state","setState","console","log","emitDeleteMessage","messageID","emitEditMessage","emitSendMessage","message","channelID","messageObj","emit","newMessageObj","prev","messages","concat","emitJoinChannel","channelLink","data","emitCreateChannel","channelName","getUserData","then","channelData","reduce","obj","ele","channel","users","name","on","off","channels","Object","keys","channelIdNamePair","map","id","selectCurrentChannel","channelItems"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\nimport io from 'socket.io-client';\nimport channelService from '../service/channelService';\n\nimport Channel from './Channel/Channel';\nimport ChannelList from './Channel/LeftBar/ChannelList/ChannelList';\n\nlet socket;\n\nconst Home = ({ logOut }) => {\n  const [state, setState] = useState({\n    currentUser: '',\n    currentChannel: '',\n    authorization: window.localStorage.getItem('authorization'),\n    username: window.localStorage.getItem('username'),\n    channelStates: {},\n  });\n\n  console.log(state);\n  const emitDeleteMessage = (messageID) => {\n  };\n\n  const emitEditMessage = (messageID) => {\n  };\n\n  const emitSendMessage = (message) => {\n    const channelID = state.currentChannel;\n    const messageObj = {\n      message,\n      channelID,\n      authorization: state.authorization,\n      username: state.username,\n    };\n    socket.emit('message', messageObj, (newMessageObj) => {\n      setState((prev) => (\n        {\n          ...prev,\n          channelStates: {\n            ...prev.channelStates,\n            [channelID]: {\n              ...prev.channelStates[channelID],\n              messages: prev.channelStates[channelID].messages.concat(newMessageObj),\n            },\n          },\n        }));\n    });\n  };\n\n  const emitJoinChannel = (channelLink) => {\n    socket.emit('join channel', channelLink, (data) => {\n      console.log(data);\n    });\n  };\n\n  const emitCreateChannel = (channelName) => {\n    console.log(channelName)\n    socket.emit('create channel', channelName, (data) => {\n      console.log(data);\n    });\n  };\n\n  // handle initial state\n  useEffect(() => {\n    // grab all channel data, messages\n    channelService\n      .getUserData()\n      .then(({ channelData }) => {\n        const channelStates = channelData.reduce((obj, ele) => {\n          if (!obj[ele.data.channel]) {\n            // eslint-disable-next-line no-param-reassign\n            obj[ele.data.channel] = {\n              users: ele.data.users,\n              name: ele.data.name,\n              messages: ele.messages,\n            };\n          }\n          return obj;\n        }, {});\n        setState((prev) => ({ ...prev, channelStates }));\n      });\n  }, []);\n\n  useEffect(() => {\n    socket = io('http://localhost:8001/');\n    socket.on('connect', () => {\n      // from servers\n      socket.on('server message', (data) => {\n        console.log(data);\n      });\n      socket.emit('join channels', { authorization: state.authorization }, (data) => {\n        console.log(data);\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    socket.on('new message', (data) => {\n      console.log(data);\n      // console.log(state.channelStates[data.channelID]);\n\n      setState((prev) => (\n        {\n          ...prev,\n          channelStates: {\n            ...prev.channelStates,\n            [data.channelID]: {\n              ...prev.channelStates[data.channelID],\n              messages: prev.channelStates[data.channelID].messages.concat(data.newMessageObj),\n            },\n          },\n        }));\n    });\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [state.channelStates]);\n\n  const channels = Object.keys(state.channelStates);\n  const channelIdNamePair = channels.map((id) => ({ id, name: state.channelStates[id].name }));\n\n  const selectCurrentChannel = (channel) => {\n    setState((prev) => ({ ...prev, currentChannel: channel }));\n  };\n\n  const channelItems = channels.map((id) => {\n    const { users, name, messages } = state.channelStates[id];\n    return (\n      <Route\n        path={`/channel/${id}`}\n        key={`${id}`}\n      >\n        <Channel\n          channel={id}\n          name={name}\n          messages={messages}\n          users={users}\n          emitSendMessage={emitSendMessage}\n        />\n      </Route>\n    );\n  });\n\n  return (\n    <div>\n      <Router>\n        <Link to=\"/\" onClick={logOut}> Logout</Link>\n        <nav>\n          <ul>\n            <ChannelList\n              selectCurrentChannel={selectCurrentChannel}\n              channelIdNamePair={channelIdNamePair}\n              emitJoinChannel={emitJoinChannel}\n              emitCreateChannel={emitCreateChannel}\n            />\n          </ul>\n        </nav>\n        <Switch>\n          {channelItems}\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}