{"ast":null,"code":"import _slicedToArray from \"/home/hei/Documents/finals/JEK/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/hei/Documents/finals/JEK/client/src/components/Channel/Container/Chat/Chat.js\";\nimport React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport auth from '../../../../service/authService';\nimport Chatbox from './Chatbox';\nimport { useField } from '../../../../hooks/useField';\nlet socket;\n\nconst Chat = ({\n  channelID\n}) => {\n  // define emit message event\n  const message = useField('text');\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        messages = _useState2[0],\n        setMessages = _useState2[1];\n\n  const sendMessage = e => {\n    e.preventDefault();\n    console.log(message.value);\n    socket.emit('message', message.value, data => {\n      console.log(data);\n    });\n  };\n\n  useEffect(() => {\n    auth.login({\n      email: 'email@gmail.com',\n      password: 'password'\n    });\n    const authorization = window.localStorage.getItem('authorization');\n    const username = window.localStorage.getItem('username'); // do it in initial render cause then it will connect before that...\n\n    socket = io('http://localhost:8001/channel');\n    socket.on('connect', () => {\n      // from servers\n      socket.on('server message', data => {\n        console.log(data);\n      }); // join that channel (room)\n\n      socket.emit('join channel', {\n        authorization,\n        channelID,\n        username\n      });\n      socket.on('message', messageObj => {\n        console.log(messageObj);\n        setMessages([...messages, messageObj]);\n      });\n    });\n    return () => {\n      socket.off();\n    };\n  }, [channelID, messages]);\n  return React.createElement(React.Fragment, null, React.createElement(Chatbox, {\n    message: message,\n    sendMessage: sendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/home/hei/Documents/finals/JEK/client/src/components/Channel/Container/Chat/Chat.js"],"names":["React","useEffect","useState","io","auth","Chatbox","useField","socket","Chat","channelID","message","messages","setMessages","sendMessage","e","preventDefault","console","log","value","emit","data","login","email","password","authorization","window","localStorage","getItem","username","on","messageObj","off"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,QAAT,QAAyB,4BAAzB;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAC9B;AACA,QAAMC,OAAO,GAAGJ,QAAQ,CAAC,MAAD,CAAxB;;AAF8B,oBAGEJ,QAAQ,CAAC,EAAD,CAHV;AAAA;AAAA,QAGvBS,QAHuB;AAAA,QAGbC,WAHa;;AAI9B,QAAMC,WAAW,GAAIC,CAAD,IAAO;AACzBA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,OAAO,CAACQ,KAApB;AACAX,IAAAA,MAAM,CAACY,IAAP,CAAY,SAAZ,EAAuBT,OAAO,CAACQ,KAA/B,EAAuCE,IAAD,IAAU;AAC9CJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACD,KAFD;AAGD,GAND;;AAQAnB,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,IAAI,CAACiB,KAAL,CAAW;AACTC,MAAAA,KAAK,EAAE,iBADE;AAETC,MAAAA,QAAQ,EAAE;AAFD,KAAX;AAKA,UAAMC,aAAa,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,eAA5B,CAAtB;AACA,UAAMC,QAAQ,GAAGH,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAjB,CAPc,CAQd;;AACApB,IAAAA,MAAM,GAAGJ,EAAE,CAAC,+BAAD,CAAX;AAEAI,IAAAA,MAAM,CAACsB,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzB;AACAtB,MAAAA,MAAM,CAACsB,EAAP,CAAU,gBAAV,EAA6BT,IAAD,IAAU;AACpCJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACD,OAFD,EAFyB,CAKzB;;AACAb,MAAAA,MAAM,CAACY,IAAP,CAAY,cAAZ,EACE;AACEK,QAAAA,aADF;AAEEf,QAAAA,SAFF;AAGEmB,QAAAA;AAHF,OADF;AAOArB,MAAAA,MAAM,CAACsB,EAAP,CAAU,SAAV,EAAsBC,UAAD,IAAgB;AACnCd,QAAAA,OAAO,CAACC,GAAR,CAAYa,UAAZ;AACAlB,QAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcmB,UAAd,CAAD,CAAX;AACD,OAHD;AAID,KAjBD;AAmBA,WAAO,MAAM;AACXvB,MAAAA,MAAM,CAACwB,GAAP;AACD,KAFD;AAGD,GAjCQ,EAiCN,CAACtB,SAAD,EAAYE,QAAZ,CAjCM,CAAT;AAmCA,SACE,0CACE,oBAAC,OAAD;AACE,IAAA,OAAO,EAAED,OADX;AAEE,IAAA,WAAW,EAAEG,WAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAQD,CAvDD;;AAyDA,eAAeL,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport auth from '../../../../service/authService';\nimport Chatbox from './Chatbox';\nimport { useField } from '../../../../hooks/useField';\n\nlet socket;\n\nconst Chat = ({ channelID }) => {\n  // define emit message event\n  const message = useField('text');\n  const [messages, setMessages] = useState([]);\n  const sendMessage = (e) => {\n    e.preventDefault();\n    console.log(message.value);\n    socket.emit('message', message.value, (data) => {\n      console.log(data);\n    });\n  };\n\n  useEffect(() => {\n    auth.login({\n      email: 'email@gmail.com',\n      password: 'password',\n    });\n\n    const authorization = window.localStorage.getItem('authorization');\n    const username = window.localStorage.getItem('username');\n    // do it in initial render cause then it will connect before that...\n    socket = io('http://localhost:8001/channel');\n\n    socket.on('connect', () => {\n      // from servers\n      socket.on('server message', (data) => {\n        console.log(data);\n      });\n      // join that channel (room)\n      socket.emit('join channel',\n        {\n          authorization,\n          channelID,\n          username,\n        });\n\n      socket.on('message', (messageObj) => {\n        console.log(messageObj);\n        setMessages([...messages, messageObj]);\n      });\n    });\n\n    return () => {\n      socket.off();\n    };\n  }, [channelID, messages]);\n\n  return (\n    <>\n      <Chatbox\n        message={message}\n        sendMessage={sendMessage}\n      />\n    </>\n  );\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}